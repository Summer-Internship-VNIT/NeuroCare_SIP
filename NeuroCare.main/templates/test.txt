client dashboard

{% extends 'layout.html' %}
{% block content %}

<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

{% if data|length > 0 %}
<div class="dashboard-container">

  <!-- Patient Info -->
  <div class="card info-card">
    <h2>Patient Dashboard</h2>
    <p><strong>Patient ID:</strong> {{ data[0]['Patient_ID'] }}</p>
    <p><strong>Sample Code:</strong> {{ data[0]['Sample Code'] }}</p>
    <!-- <p><strong>Last Test Date:</strong> {{ data[-1]['Date'] }}</p> -->
    <p><strong>Last Test Date:</strong>
    {% if data[-1]['Date'] %}
      {{ data[-1]['Date'] }}
    {% else %}
      N/A
    {% endif %}
    </p>
  </div>

  <!-- Stat Cards -->
  <div class="card-grid">
    <div class="card stat-card"><h4>TLC</h4><p>{{ data[-1]['TLC'] }}</p></div>
    <div class="card stat-card"><h4>Lymphocytes%</h4><p>{{ data[-1]['L%'] }}%</p></div>
    <div class="card stat-card"><h4>Polymorphs%</h4><p>{{ data[-1]['P%'] }}%</p></div>
    <div class="card stat-card"><h4>Sugar</h4><p>{{ data[-1]['Sugar'] }} mg/dL</p></div>
    <div class="card stat-card"><h4>Protein</h4><p>{{ data[-1]['Protein'] }} mg/dL</p></div>
  </div>

  <!-- Prediction Result Block -->
  {% if prediction %}
  <div class="card-grid" style="display: flex; justify-content: center; gap: 20px; flex-wrap: wrap; margin-top: 20px;">
    <div class="card stat-card" style="flex: 1 1 200px; text-align: center;">
      <h4>Prediction Result:</h4>
      <p style="color: '{% if prediction and prediction.condition == 'Abnormal' %}red{% elif prediction %}green{% else %}black{% endif %}';">
        {{ prediction.condition if prediction else 'N/A' }}
      </p>
    </div>
    <div class="card stat-card" style="flex: 1 1 200px; text-align: center;">
      <h4>TBM Evaluation Score:</h4>
      <p>{{ prediction.tbm_score if prediction else 'N/A' }}</p>
    </div>
    <div class="card stat-card" style="flex: 1 1 300px; text-align: center;">
      <h4>Interpretation:</h4>
      <p>{{ prediction.interpretation if prediction else 'N/A' }}</p>
    </div>
  </div>
  {% endif %}

  <!-- Charts Section -->
  <div class="charts-container">
    <div class="card chart-card">
      <h3>TLC Over Time</h3>
      <canvas id="trendChart"></canvas>
    </div>
    <div class="card chart-card">
      <h3>CSF Cell Composition</h3>
      <canvas id="lpPieChart"></canvas>
    </div>
    <div class="card chart-card">
      <h3>Sugar & Protein Over Time</h3>
      <canvas id="sugarProteinChart"></canvas>
    </div>
  </div>
  
  <!-- Report Section -->
  <div style="text-align: center; margin-top: 30px;">
  <a href="{{ url_for('report') }}"
     style="padding: 10px 20px; background-color: #6c63ff; color: white; text-decoration: none; border-radius: 5px;">
    View Full Report
  </a>
  </div>

  <!-- Historical Records Table -->
  <div class="card table-card">
    <h3>Historical Records</h3>
    <input type="text" id="searchInput" placeholder="Search by Sample Code...">
    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Sample Code</th>
            <th>TLC</th>
            <th>L%</th>
            <th>P%</th>
            <th>Sugar</th>
            <th>Protein</th>
            <th>Diagnosis</th>
            <th>TBM Score</th>
          </tr>
        </thead>
        <tbody id="historyTable">
          {% for row in data %}
          <tr>
            <td>{{ row['Date'] }}</td>
            <td>{{ row['Sample Code'] }}</td>
            <td>{{ row['TLC'] }}</td>
            <td>{{ row['L%'] }}</td>
            <td>{{ row['P%'] }}</td>
            <td>{{ row['Sugar'] }}</td>
            <td>{{ row['Protein'] }}</td>
            <td style="color: '{% if row['Diagnosis'] == 'Abnormal' %}red{% elif row['Diagnosis'] %}green{% else %}black{% endif %}';">
              {{ row['Diagnosis'] if row['Diagnosis'] else 'N/A' }}
            </td>
            <td>{{ row.get('TBM Score', 'N/A') }}</td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>

</div>

<!-- JavaScript Chart Section -->
<script>
  const chartData = JSON.parse('{{ data | tojson | safe }}');

  // Format date to "20 Jun 2025"
  const formatDate = dateStr => {
    const date = new Date(dateStr);
    return new Intl.DateTimeFormat('en-GB', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    }).format(date);
  };

  // TLC Trend Chart
  new Chart(document.getElementById('trendChart'), {
    type: 'line',
    data: {
      labels: chartData.map(r => formatDate(r['Date'])),
      datasets: [{
        label: 'TLC',
        data: chartData.map(r => r['TLC']),
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        fill: true,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'TLC Trend Over Time' }
      }
    }
  });


  // L% vs P% Pie Chart — uses latest record
  const latestRecord = chartData[chartData.length - 1];
  new Chart(document.getElementById('lpPieChart'), {
    type: 'pie',
    data: {
      labels: ['Lymphocytes (L%)', 'Polymorphs (P%)'],
      datasets: [{
        data: [latestRecord['L%'], latestRecord['P%']],
        backgroundColor: ['#36A2EB', '#FF6384'],
        hoverOffset: 4
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'Lymphocytes vs Polymorphs' }
      }
    }
  });

  // Sugar & Protein Trend
  new Chart(document.getElementById('sugarProteinChart'), {
    type: 'line',
    data: {
      labels: chartData.map(r => formatDate(r['Date'])),
      datasets: [
        {
          label: 'Sugar',
          data: chartData.map(r => r['Sugar']),
          borderColor: '#f39c12',
          backgroundColor: 'rgba(243, 156, 18, 0.2)',
          fill: true,
          tension: 0.3
        },
        {
          label: 'Protein',
          data: chartData.map(r => r['Protein']),
          borderColor: '#8e44ad',
          backgroundColor: 'rgba(142, 68, 173, 0.2)',
          fill: true,
          tension: 0.3
        }
      ]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'Sugar & Protein Trend' }
      }
    }
  });


  // Sample Code Search Filter
  document.getElementById("searchInput").addEventListener("input", function () {
    const value = this.value.toLowerCase();
    document.querySelectorAll("#historyTable tr").forEach(row => {
      const sampleCode = row.children[1].textContent.toLowerCase();
      row.style.display = sampleCode.includes(value) ? "" : "none";
    });
  });
</script>

{% else %}
<div class="dashboard-container">
  <div class="card info-card">
    <h3>Welcome!</h3>
    <p>No CSF records found yet.</p>
    <p>Please <a href="{{ url_for('data_entry') }}">enter lab data</a> to see your dashboard.</p>
  </div>
</div>
{% endif %}

{% endblock %}


css 



body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #ffffff;
  margin: 0;
  padding: 0;
}

.dashboard-container {
  padding: 2rem;
  max-width: 1200px;
  margin: auto;
}

.card {
  background: #b3e6e0;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.05);
  padding: 1.5rem;
  margin-bottom: 1.5rem;
}

.info-card h2 {
  margin-top: 0;
  color: #2c3e50;
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 1rem;
}

.stat-card {
  text-align: center;
  border: 1px solid #eee;
}

.chart-card canvas {
  max-width: 100%;
  height: 300px;
}

.charts-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

.table-card input {
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
  border-radius: 8px;
  border: 1px solid #9cc4d0;
}

.table-scroll {
  max-height: 300px;
  overflow-y: auto;
  overflow-x: auto;
  border: 1px solid #ddd;
}

.table-scroll table {
  width: 100%;
  border-collapse: collapse;
}

.table-scroll th, .table-scroll td {
  padding: 0.75rem;
  text-align: left;
  border-bottom: 1px solid #18414e;
}

.table-scroll thead th {
  position: sticky;
  top: 0;
  background-color: #18414e; /* Blue */
  color: rgb(255, 255, 255);
  z-index: 2;
}


.table-scroll tr:hover {
  background-color: #9cc4d0;
}

.card-grid {
  display: flex;
  flex-wrap: nowrap;  /* 🚫 Don't wrap */
  justify-content: space-between;
  gap: 15px; /* Optional */
}

.card.stat-card {
  width: 20%;
  background-color: #b2dfdb;
  padding: 20px;
  border-radius: 12px;
  text-align: center;
  min-height: 120px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}




routes


"""
routes/__init__.py
All Flask routes for the TBM dashboard
"""

from pyexpat import model
from flask import render_template, request, redirect, session, url_for
import numpy as np
from werkzeug.security import generate_password_hash, check_password_hash
from utils import load_user_data, load_patient_data, get_patient_data_by_id
import pandas as pd
import os, uuid
import joblib
from model.predictor import predict_condition
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from model.predictor import predict_condition
from flask import send_file
from fpdf import FPDF
from flask import current_app
from flask import Flask, render_template, request, redirect, url_for, send_file, current_app



USER_CSV            = "users.csv"                      # username | password | role | patient_id
TBM_DATA_CSV        = os.path.join("data", "tbm_data.csv")

model_path = os.path.join(os.getcwd(), "model", "rf_csf_model.pkl")
model = joblib.load(model_path)


# --------------------------------------------------------------------------- #
#  ROUTES
# --------------------------------------------------------------------------- #
def init_routes(app):
    # ─────────────────────────── HOME ─────────────────────────── #
    @app.route("/home")
    def home():
        return render_template("home.html")

    @app.route("/")  # root → /home
    def index():
        return redirect(url_for("home"))

    # ────────────────────────── LOGIN ────────────────────────── #
    @app.route("/login", methods=["GET", "POST"])
    def login():
        if request.method == "POST":
            users     = load_user_data()
            username  = request.form["username"]
            password  = request.form["password"]

            row = users[users["username"] == username]
            if row.empty or not check_password_hash(row.iloc[0]["password"], password):
                return render_template("login.html", error="Invalid credentials")

            # Save minimal session
            session["username"]   = username
            session["role"]       = row.iloc[0]["role"]
            session["patient_id"] = row.iloc[0]["patient_id"]

            # Redirect logic
            if session["role"] == "Admin":
                return redirect(url_for("dashboard"))
            else:
                return redirect(url_for("data_entry"))

        return render_template("login.html")

    # ───────────────────────── SIGN-UP ───────────────────────── #
    @app.route("/signup", methods=["GET", "POST"])
    def signup():
        if request.method == "POST":
            username = request.form["username"]
            password = request.form["password"]
            role     = request.form["role"]

            users = load_user_data()
            if username in users["username"].values:
                return render_template("signup.html", error="Username already exists.")

            # Generate patient_id for clients
            patient_id = (
                request.form.get("patient_id") or str(uuid.uuid4())
                if role == "Client" else ""
            )

            # Store user
            hashed_pw = generate_password_hash(password)
            new_user  = pd.DataFrame(
                [{"username": username, "password": hashed_pw,
                  "role": role, "patient_id": patient_id}]
            )
            users = pd.concat([users, new_user], ignore_index=True)
            users.to_csv(USER_CSV, index=False)

            # Start session and redirect
            session.update(username=username, role=role, patient_id=patient_id)
            return redirect(url_for("login"))


        return render_template("signup.html")


    # ───────────── DATA-ENTRY (CSF) ───────────── #
    @app.route("/data_entry", methods=["GET", "POST"])
    def data_entry():
        if "username" not in session or session.get("role") != "Client":
            print("❌ Unauthorized access.")
            return redirect(url_for("login"))

        if request.method == "POST":
            try:
                print("📥 Received form:", dict(request.form))
                print("🔑 Session:", session)
                print("📄 Saving to:", TBM_DATA_CSV)

                # Full expected columns, including optional ones
                columns = [
                    "Sr No.", "Date", "Sample Code", "Patient_ID",
                    "TLC", "L%", "P%", "Sugar", "Protein",
                    "Diagnosis", "TBM Score"
                ]

                # Ensure folder exists
                os.makedirs(os.path.dirname(TBM_DATA_CSV), exist_ok=True)

                # Load or initialize DataFrame
                if os.path.exists(TBM_DATA_CSV):
                    df = pd.read_csv(TBM_DATA_CSV)
                    # Ensure all columns exist
                    for col in columns:
                        if col not in df.columns:
                            df[col] = ""
                else:
                    df = pd.DataFrame(columns=columns)

                # New row entry
                next_sr = len(df) + 1
                new_row = {
                    "Sr No.": next_sr,
                    "Date": request.form["date"],
                    "Sample Code": request.form["sample_code"],
                    "Patient_ID": session.get("patient_id", "UNKNOWN"),
                    "TLC": request.form["tlc"],
                    "L%": request.form["l_percent"],
                    "P%": request.form["p_percent"],
                    "Sugar": request.form["sugar"],
                    "Protein": request.form["protein"],
                    "Diagnosis": "",
                    "TBM Score": ""
                }

                print("➕ Adding new row:", new_row)

                # Add to DataFrame
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                df.to_csv(TBM_DATA_CSV, index=False)
                print("✅ CSV updated successfully!")

                return redirect(url_for("dashboard"))

            except Exception as e:
                print("❌ Exception while saving:", e)

        return render_template("data_entry.html")



    # ───────────────────── DASHBOARD ───────────────────── #
    # @app.route("/dashboard")
    # def dashboard():
    #     if "username" not in session:
    #         return redirect(url_for("login"))

    #     role   = session["role"]
    #     lab_df = load_patient_data()

    #     if role == "Admin":
    #         return render_template(
    #             "admin_dashboard.html",
    #             data=lab_df.to_dict(orient="records")
    #         )

    #     # Client dashboard
    #     pid      = session["patient_id"]
    #     lab_rows = get_patient_data_by_id(lab_df, pid).to_dict(orient="records")

    #     return render_template("client_dashboard.html", data=lab_rows)

    @app.route('/admin/dashboard')
    def admin_dashboard():
        try:
            df = pd.read_csv(TBM_DATA_CSV)  # Ensure TBM_DATA_CSV is defined
        except FileNotFoundError:
            return "TBM data file not found", 404

        df = df.dropna(subset=['Patient_ID', 'Diagnosis'])

        data = df.to_dict(orient="records")  # Convert to list of dicts for template

        return render_template('admin_dashboard.html', data=data)
    
    # ───────────────────── ADMIN_REPORT ───────────────────── # 
    @app.route('/admin_generate_report', methods=['POST'])
    def admin_generate_report():
        patient_id = request.form.get('patient_id')
        if not patient_id:
            return "Please enter a Patient ID.", 400

        return redirect(url_for('admin_report', patient_id=patient_id))

    
    @app.route('/admin_report/<patient_id>')
    def admin_report(patient_id):
        df = pd.read_csv(os.path.join('data', 'tbm_data.csv'))
        patient_data = df[df['Patient_ID'].astype(str) == str(patient_id)]

        if patient_data.empty:
            return f"<h3>No records found for Patient ID {patient_id}</h3>"

        return render_template("admin_report.html", records=patient_data.to_dict(orient='records'), patient_id=patient_id)

    # ───────────────────── BLOG ───────────────────── # 
    @app.route('/blog')
    def blog():
        return render_template('blog.html')

    # ───────────────────── RECORDS ───────────────────── # 
    @app.route("/dashboard")
    def dashboard():
        if "username" not in session:
            return redirect(url_for("login"))

        role = session["role"]
        data = load_patient_data()

        # ─── Admin Dashboard ───
        # if role == "Admin":
        #     return render_template("admin_dashboard.html", data=data.to_dict(orient="records"))
        
         # ─── Admin Dashboard ───
        if role == "Admin":
            try:
                df = pd.read_csv(TBM_DATA_CSV)
            except FileNotFoundError:
                return "TBM data file not found", 404

            # Drop incomplete records for accurate stats
            df = df.dropna(subset=['Patient_ID', 'Diagnosis'])

            # Basic stats
            total_records = len(df)
            total_patients = df['Patient_ID'].nunique()
            diagnosis_counts = df['Diagnosis'].value_counts().to_dict()

            # TBM Score Distribution (only for abnormal cases)
            tbm_df = df[df['Diagnosis'] == 'Abnormal'].dropna(subset=['TBM Score'])
            tbm_score_dist = (
                tbm_df['TBM Score']
                .astype(str)
                .value_counts()
                .sort_index()
                .to_dict()
            )

            return render_template(
                "admin_ui.html",
                total_records=total_records,
                total_patients=total_patients,
                pred_summary=diagnosis_counts,
                tbm_score_dist=tbm_score_dist
            )

        # ─── Client Dashboard ───
        pid = session["patient_id"]
        patient_df = get_patient_data_by_id(data, pid)

        # ✅ Sort records by Date (latest last)
        if not patient_df.empty:
            patient_df["Date"] = pd.to_datetime(patient_df["Date"], errors='coerce')
            patient_df = patient_df.dropna(subset=["Date"])
            patient_df = patient_df.sort_values(by="Date")

        lab_rows = patient_df.to_dict(orient="records")
        prediction = {}
        updated = False

        # ✅ Add Diagnosis & TBM Score if not already present
        for i, row in enumerate(lab_rows):
            pred_result = predict_condition(row)
            if "Diagnosis" not in row or "TBM Score" not in row \
                or row.get("Diagnosis") != pred_result.get("condition") \
                or row.get("TBM Score") != pred_result.get("tbm_score"):
                row["Diagnosis"] = pred_result.get("condition", "N/A")
                row["TBM Score"] = pred_result.get("tbm_score", "N/A")
                updated = True

        # ✅ Save updated rows to CSV only if changes were made
        if updated:
            updated_df = pd.DataFrame(lab_rows)
            full_data = load_patient_data()

            # Remove old rows for this patient, replace with updated
            full_data = full_data[full_data["Patient_ID"] != pid]
            full_data = pd.concat([full_data, updated_df], ignore_index=True)
            full_data.to_csv(TBM_DATA_CSV, index=False)

        # ✅ Final prediction for latest test
        if lab_rows:
            prediction = predict_condition(lab_rows[-1])

        return render_template("client_dashboard.html", data=lab_rows, prediction=prediction)

   # ───────────────────── Report ───────────────────── # 
    @app.route('/report')
    def report():
        if "username" not in session:
            return redirect(url_for("login"))

        pid = session.get("patient_id")
        data = load_patient_data()
        patient_df = get_patient_data_by_id(data, pid)

        # Sort to get latest record
        if not patient_df.empty:
            patient_df["Date"] = pd.to_datetime(patient_df["Date"], errors="coerce")
            patient_df = patient_df.dropna(subset=["Date"])
            patient_df = patient_df.sort_values(by="Date")
            latest_record = patient_df.iloc[-1].to_dict()
        else:
            latest_record = {}

        return render_template("report.html", record=latest_record)
    
    # ───────────────────── Download Report PDF ───────────────────── #
    @app.route('/download_report_pdf')
    def download_report_pdf():
        df = pd.read_csv(os.path.join('data', 'tbm_data.csv'))
        latest_record = df.iloc[-1]

        from fpdf import FPDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Patient TBM Report", ln=1, align='C')
        pdf.ln(10)

        for col in ['Patient_ID', 'Date', 'Sample Code', 'TLC', 'L%', 'P%', 'Sugar', 'Protein', 'Diagnosis', 'TBM Score']:
            value = latest_record[col] if col in latest_record else "N/A"
            pdf.cell(200, 10, txt=f"{col}: {value}", ln=1)

        pdf_path = "latest_report.pdf"
        pdf.output(pdf_path)

        return send_file(pdf_path, as_attachment=True)

 # ───────────────────── Admin_PDF_Download───────────────────── # 

    from flask import send_file, request
    import pandas as pd
    from fpdf import FPDF

    @app.route('/admin_download_report_pdf/<patient_id>')
    def admin_download_report_pdf(patient_id):
        csv_path = os.path.join('data', 'tbm_data.csv')
        if not os.path.exists(csv_path):
            return "Data file not found.", 404

        df = pd.read_csv(csv_path)
        patient_data = df[df['Patient_ID'] == patient_id]

        if patient_data.empty:
            return f"No records found for Patient ID {patient_id}", 404

        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        # Helper to clean/encode text safely
        def clean_text(text):
            if pd.isna(text):
                return "N/A"
            return str(text).replace('—', '-').encode('latin-1', errors='ignore').decode('latin-1')

        for _, row in patient_data.iterrows():
            pdf.add_page()
            pdf.set_font("Arial", 'B', 16)
            pdf.cell(200, 10, txt="Patient TBM Report", ln=True, align='C')
            pdf.set_font("Arial", size=12)
            pdf.ln(5)

            # Add each row of information
            for col in ['Patient_ID', 'Date', 'Sample Code', 'TLC', 'L%', 'P%', 'Sugar', 'Protein', 'Diagnosis', 'TBM Score']:
                value = clean_text(row[col]) if col in row else 'N/A'
                pdf.cell(200, 10, txt=f"{col}: {value}", ln=True)

            pdf.ln(5)

            # Diagnosis interpretation
            if row['Diagnosis'] == 'Abnormal':
                pdf.set_text_color(255, 0, 0)
                pdf.multi_cell(0, 10, clean_text(interpret_tbm_score(row['TBM Score'])))
            else:
                pdf.set_text_color(0, 128, 0)
                pdf.multi_cell(0, 10, clean_text("Diagnosis is Normal. No signs of TBM."))

            pdf.set_text_color(0, 0, 0)  # Reset text color

        # Save to file
        pdf_path = os.path.join('downloads', f'report_{patient_id}.pdf')
        os.makedirs('downloads', exist_ok=True)
        pdf.output(pdf_path)

        return send_file(pdf_path, as_attachment=True)


    # TBM interpretation logic
    def interpret_tbm_score(score):
        try:
            score = float(score)
        except:
            return "TBM Score is invalid."

        if score == 0:
            return "Score 0 — No evidence of TBM. Correlate clinically."
        elif score == 2.5:
            return "Score 2.5 — Mild CSF changes. Observation advised."
        elif score == 5:
            return "Score 5 — Possible TBM. Further evaluation needed."
        elif score == 7.5:
            return "Score 7.5 — Probable TBM. Immediate clinical action advised."
        elif score == 10:
            return "Score 10 — Strong TBM indication. Urgent action required."
        else:
            return "Score is unusual. Please consult a specialist."


    # ───────────────────── LOGOUT ───────────────────── # 
    @app.route("/logout")
    def logout():
        session.clear()
        return redirect(url_for("home"))



        script code 


        {% comment %} <script>
    const chartData = JSON.parse('{{ data | tojson | safe }}');

    // TLC Trend
    new Chart(document.getElementById('trendChart'), {
      type: 'line',
      data: {
        labels: chartData.map(r => r['Date']),
        datasets: [{
          label: 'TLC',
          data: chartData.map(r => r['TLC']),
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: true,
          tension: 0.3
        }]
      }
    });

    // L% vs P% Pie Chart
    new Chart(document.getElementById('lpPieChart'), {
      type: 'pie',
      data: {
        labels: ['Lymphocytes (L%)', 'Polymorphs (P%)'],
        datasets: [{
          data: [chartData[0]['L%'], chartData[0]['P%']],
          backgroundColor: ['#36A2EB', '#FF6384'],
          hoverOffset: 4
        }]
      }
    });

    // Sugar & Protein Trend
    new Chart(document.getElementById('sugarProteinChart'), {
      type: 'line',
      data: {
        labels: chartData.map(r => r['Date']),
        datasets: [
          {
            label: 'Sugar',
            data: chartData.map(r => r['Sugar']),
            borderColor: '#f39c12',
            backgroundColor: 'rgba(243, 156, 18, 0.2)',
            fill: true,
            tension: 0.3
          },
          {
            label: 'Protein',
            data: chartData.map(r => r['Protein']),
            borderColor: '#8e44ad',
            backgroundColor: 'rgba(142, 68, 173, 0.2)',
            fill: true,
            tension: 0.3
          }
        ]
      }
    });

    // Search Filter
    document.getElementById("searchInput").addEventListener("input", function () {
      const value = this.value.toLowerCase();
      document.querySelectorAll("#historyTable tr").forEach(row => {
        const sampleCode = row.children[1].textContent.toLowerCase();
        row.style.display = sampleCode.includes(value) ? "" : "none";
      });
    });
  </script> {% endcomment %}




  updated client dashboard


  {% extends 'layout.html' %}
  {% block content %}

  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <div class="dashboard">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="profile">
        <div class="avatar">
          <img src="{{ url_for('static', filename='images/dp.png') }}" alt="Profile Picture">
        </div>
        <h2>Patient</h2>
        <p>{{ data[0]['Patient_ID'] if data }}</p>
      </div>
      <div class="nav-menu">
        <ul>
          <li><a href="{{ url_for('data_entry') }}">Data Entry</a></li>
          <li><a href="{{ url_for('data_entry') }}">Home</a></li>
          <li><a href="{{ url_for('data_entry') }}">Report</a></li>
          <li><a href="{{ url_for('data_entry') }}">Admin</a></li>
        </ul>
      </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
      {% if data|length > 0 %}
      <div class="header">
        <h1>Patient Dashboard</h1>
      </div>

      <div class="cards">
        <div class="card">TLC <span>{{ data[-1]['TLC'] }}</span></div>
        <div class="card">Lymohocytes% <span>{{ data[-1]['L%'] }}%</span></div>
        <div class="card">Polymorphs% <span>{{ data[-1]['P%'] }}%</span></div>
        <div class="card">Sugar <span>{{ data[-1]['Sugar'] }} mg/dL</span></div>
        <div class="card">Protein <span>{{ data[-1]['Protein'] }} mg/dL</span></div>
      </div>

      <div class="cards">
        <div class="card">Diagnosis <span>{{ diagnosis_label }}</span></div>
        <div class="card">TBM Score <span>{{ model_output_percentage }}%</span></div>
        <div class="card">Interpretation <span>{{ diagnosis_message }}</span></div>
      </div>

      <div class="charts">
        <div class="bar-chart">
          <h3>TLC Over Time</h3>
          <canvas id="trendChart"></canvas>
        </div>
        <div class="pie-chart">
          <h3>CSF Cell Composition</h3>
          <canvas id="lpPieChart"></canvas>
        </div>
      </div>

      <div class="bottom-charts">
        <div class="line-chart">
          <h3>Sugar & Protein Over Time</h3>
          <canvas id="sugarProteinChart"></canvas>
        </div>
        <div class="calendar">
          <h3>Latest Test</h3>
          <p>{{ data[-1]['Date'] }}</p>
        </div>
      </div>

      <div class="table-card">
        <h3>Historical Records</h3>
        <input type="text" id="searchInput" placeholder="Search by Sample Code...">
        <div class="table-scroll">
          <table>
            <thead>
              <tr>
                <th>Date</th>
                <th>Sample Code</th>
                <th>TLC</th>
                <th>L%</th>
                <th>P%</th>
                <th>Sugar</th>
                <th>Protein</th>
                <th>Diagnosis</th>
              </tr>
            </thead>
            <tbody id="historyTable">
              {% for row in data %}
              <tr>
                <td>{{ row['Date'] }}</td>
                <td>{{ row['Sample Code'] }}</td>
                <td>{{ row['TLC'] }}</td>
                <td>{{ row['L%'] }}</td>
                <td>{{ row['P%'] }}</td>
                <td>{{ row['Sugar'] }}</td>
                <td>{{ row['Protein'] }}</td>
                <td>{{ row['Diagnosis'] }}</td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>

      {% else %}
      <div class="card">
        <h3>Welcome!</h3>
        <p>No CSF records found yet.</p>
        <p>Please <a href="{{ url_for('data_entry') }}">enter lab data</a> to see your dashboard.</p>
      </div>
      {% endif %}
    </div>
  </div>

<script>
window.addEventListener('DOMContentLoaded', function () {
  const chartData = {{ data | tojson | safe }};

  // ✅ Helper to format date (e.g., "24 Jun")
  function formatDate(dateStr) {
    const d = new Date(dateStr);
    return isNaN(d) ? dateStr : d.toLocaleDateString("en-IN", {
      day: "2-digit",
      month: "short"
    });
  }

  // ────────── TLC Trend Line Chart ──────────
  const tlcLabels = chartData.map(row => formatDate(row['Date']));
  const tlcValues = chartData.map(row => row['TLC']);

  new Chart(document.getElementById("trendChart"), {
    type: "line",
    data: {
      labels: tlcLabels,
      datasets: [{
        label: "TLC",
        data: tlcValues,
        borderColor: "blue",
        backgroundColor: "rgba(0, 0, 255, 0.1)",
        fill: true,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'TLC Trend' },
        legend: { display: true, position: 'top' }
      },
      scales: {
        y: { beginAtZero: true, title: { display: true, text: 'TLC' } },
        x: { title: { display: true, text: 'Date' } }
      }
    }
  });

  // ────────── CSF Cell Composition Pie Chart ──────────
  const lymph = chartData.at(-1)["L%"];
  const polymorphs = chartData.at(-1)["P%"];

  new Chart(document.getElementById("lpPieChart"), {
    type: "pie",
    data: {
      labels: ["Lymphocytes (L%)", "Polymorphs (P%)"],
      datasets: [{
        data: [lymph, polymorphs],
        backgroundColor: ["#36A2EB", "#FF6384"],
        hoverOffset: 4
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'CSF Cell Composition' },
        legend: { display: true, position: 'bottom' }
      }
    }
  });

  // ────────── Sugar & Protein Line Chart ──────────
  const sugarProteinLabels = chartData.map(r => formatDate(r['Date']));
  const sugarData = chartData.map(r => r['Sugar']);
  const proteinData = chartData.map(r => r['Protein']);

  new Chart(document.getElementById('sugarProteinChart'), {
    type: 'line',
    data: {
      labels: sugarProteinLabels,
      datasets: [
        {
          label: 'Sugar',
          data: sugarData,
          borderColor: '#f39c12',
          backgroundColor: 'rgba(243, 156, 18, 0.2)',
          fill: true,
          tension: 0.3
        },
        {
          label: 'Protein',
          data: proteinData,
          borderColor: '#8e44ad',
          backgroundColor: 'rgba(142, 68, 173, 0.2)',
          fill: true,
          tension: 0.3
        }
      ]
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: 'Sugar & Protein Trend' },
        legend: { position: 'top' }
      },
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'mg/dL' }
        },
        x: {
          title: { display: true, text: 'Date' }
        }
      }
    }
  });

  // ────────── Search Filter for Table ──────────
  document.getElementById("searchInput").addEventListener("input", function () {
    const value = this.value.toLowerCase();
    document.querySelectorAll("#historyTable tr").forEach(row => {
      const sampleCode = row.children[1].textContent.toLowerCase();
      row.style.display = sampleCode.includes(value) ? "" : "none";
    });
  });
});
</script>



  {% endblock %}



  admin UI

  {% extends 'layout.html' %}
{% block content %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="dashboard-container">

  <!-- Admin Welcome -->
  <div class="card info-card">
    <div style="display: flex; justify-content: space-between; align-items: center;">
      <div>
        <h2>Welcome, Admin!</h2>
        <p>This dashboard displays trends and statistics from the TBM dataset.</p>
      </div>
      <div>
        <a href="{{ url_for('admin_dashboard') }}" style="padding: 10px 16px; background: #007bff; color: white; border-radius: 4px; text-decoration: none;">View Records</a>
      </div>
    </div>
  </div>

  <!-- Stat Cards -->
  <div class="card-grid">
    <div class="card stat-card">
      <h4>Total Records</h4>
      <p>{{ total_records }}</p>
    </div>
    <div class="card stat-card">
      <h4>Total Unique Patients</h4>
      <p>{{ total_patients }}</p>
    </div>

    <div style="background-color: #c2edea; padding: 20px; border-radius: 15px; margin: 10px; flex: 1;">
  <form action="{{ url_for('admin_generate_report') }}" method="post" style="display: flex; flex-direction: column; align-items: center;">
    <label for="admin_pid" style="font-weight: bold; color: #007bff; margin-bottom: 10px;">Generate Patient Report</label>
    <input type="text" id="admin_pid" name="patient_id" placeholder="Enter Patient ID"
           style="padding: 8px; border-radius: 5px; border: 1px solid #ccc; margin-bottom: 10px; width: 100%;">
    <button type="submit"
            style="background-color: #007bff; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer;">
      Generate
    </button>
  </form>
</div>
  
</div>

  <!-- Charts -->
  <div class="charts-container">
    <!-- Diagnosis Distribution -->
    <div class="card chart-card">
      <h3>Diagnosis Distribution</h3>
      <canvas id="diagnosisChart"></canvas>
    </div>

    <!-- TBM Score Distribution -->
    <div class="card chart-card">
      <h3>TBM Score Distribution (Abnormal Cases)</h3>
      <canvas id="tbmScoreChart"></canvas>
    </div>
  </div>
</div>

<!-- Chart Script -->
<script>
  const predSummary = JSON.parse(`{{ pred_summary | tojson | safe }}`);
  const tbmScores = JSON.parse(`{{ tbm_score_dist | tojson | safe }}`);

  // Diagnosis Pie Chart
  new Chart(document.getElementById('diagnosisChart'), {
    type: 'pie',
    data: {
      labels: Object.keys(predSummary),
      datasets: [{
        data: Object.values(predSummary),
        backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56'],
        hoverOffset: 4
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'Diagnosis Summary'
        },
        legend: {
          position: 'bottom'
        }
      }
    }
  });

  // TBM Score Bar Chart
  new Chart(document.getElementById('tbmScoreChart'), {
    type: 'bar',
    data: {
      labels: Object.keys(tbmScores),
      datasets: [{
        label: 'Patients',
        data: Object.values(tbmScores),
        backgroundColor: '#8e44ad'
      }]
    },
    options: {
      responsive: true,
      plugins: {
        title: {
          display: true,
          text: 'TBM Score Distribution'
        },
        legend: { display: false }
      },
      scales: {
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: 'Count'
          }
        },
        x: {
          title: {
            display: true,
            text: 'TBM Score'
          }
        }
      }
    }
  });
</script>
{% endblock %}



style="font-weight: bold; color: #1margin-bottom: 10px;c4450; 